// Copyright 2019 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

// Code generated by mockery v1.0.0. DO NOT EDIT.

package monitor

import mock "github.com/stretchr/testify/mock"
import time "time"

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// Count provides a mock function with given fields: contextTag, key, amount, tags
func (_m *MockClient) Count(contextTag string, key string, amount int64, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, contextTag, key, amount)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Count1 provides a mock function with given fields: contextTag, key, tags
func (_m *MockClient) Count1(contextTag string, key string, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, contextTag, key)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Debug provides a mock function with given fields: tag, message, args
func (_m *MockClient) Debug(tag string, message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, tag, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// DefaultTags provides a mock function with given fields:
func (_m *MockClient) DefaultTags() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Duration provides a mock function with given fields: contextTag, key, start, tags
func (_m *MockClient) Duration(contextTag string, key string, start time.Time, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, contextTag, key, start)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: tag, message, args
func (_m *MockClient) Error(tag string, message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, tag, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// ErrorWithStats provides a mock function with given fields: tag, errType, message, args
func (_m *MockClient) ErrorWithStats(tag string, errType string, message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, tag, errType, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: tag, message, args
func (_m *MockClient) Fatal(tag string, message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, tag, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// FatalWithStats provides a mock function with given fields: tag, errType, message, args
func (_m *MockClient) FatalWithStats(tag string, errType string, message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, tag, errType, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Gauge provides a mock function with given fields: contextTag, key, value, tags
func (_m *MockClient) Gauge(contextTag string, key string, value float64, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, contextTag, key, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Histogram provides a mock function with given fields: contextTag, key, value, tags
func (_m *MockClient) Histogram(contextTag string, key string, value float64, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, contextTag, key, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: tag, message, args
func (_m *MockClient) Info(tag string, message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, tag, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MakeSafe provides a mock function with given fields: in
func (_m *MockClient) MakeSafe(in string) string {
	ret := _m.Called(in)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Security provides a mock function with given fields: tag, message, args
func (_m *MockClient) Security(tag string, message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, tag, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// SecurityWithStats provides a mock function with given fields: tag, errType, message, args
func (_m *MockClient) SecurityWithStats(tag string, errType string, message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, tag, errType, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// TrackDiskSpace provides a mock function with given fields:
func (_m *MockClient) TrackDiskSpace() {
	_m.Called()
}

// Warn provides a mock function with given fields: tag, message, args
func (_m *MockClient) Warn(tag string, message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, tag, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// WarnWithStats provides a mock function with given fields: tag, errType, message, args
func (_m *MockClient) WarnWithStats(tag string, errType string, message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, tag, errType, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// WithHost provides a mock function with given fields: hostname
func (_m *MockClient) WithHost(hostname string) Client {
	ret := _m.Called(hostname)

	var r0 Client
	if rf, ok := ret.Get(0).(func(string) Client); ok {
		r0 = rf(hostname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Client)
		}
	}

	return r0
}
